generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  uid                String              @id @unique
  prenom             String?
  nom                String?
  email              String              @unique
  password           String
  profilePicture     String?
  role               UserRole            @default(USER)
  children           UserChild[]
  posts              Post[]
  sharedDocuments    SharedDocument[]
  dailyTransmissions DailyTransmission[]
  chatMessages       ChatMessage[]
  Like               Like[]
  Comment            Comment[]
}

enum UserRole {
  USER
  NOUNOU
}

model Child {
  id                 String              @id @default(cuid())
  name               String
  birthDate          DateTime
  users              UserChild[]
  posts              Post[]
  dailyTransmissions DailyTransmission[]
  SharedDocument     SharedDocument[]
}

model UserChild {
  userId  String
  childId String
  user    User   @relation(fields: [userId], references: [uid])
  child   Child  @relation(fields: [childId], references: [id])

  @@id([userId, childId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [uid])
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [uid])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
}

model Post {
  id        String    @id @default(cuid())
  content   String
  image     String?
  userId    String
  user      User      @relation(fields: [userId], references: [uid])
  childId   String
  child     Child     @relation(fields: [childId], references: [id])
  createdAt DateTime  @default(now())
  likes     Like[]
  comments  Comment[]
}

model SharedDocument {
  id        String   @id @default(cuid())
  title     String
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [uid])
  childId   String? 
  child     Child?   @relation(fields: [childId], references: [id])
  createdAt DateTime @default(now())
}

model DailyTransmission {
  id        String   @id @default(cuid())
  content   String
  diapers   Int
  meals     Int
  sleep     Int
  userId    String
  user      User     @relation(fields: [userId], references: [uid])
  childId   String
  child     Child    @relation(fields: [childId], references: [id])
  createdAt DateTime @default(now())
}

model ChatMessage {
  id        String   @id @default(cuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [uid])
  createdAt DateTime @default(now())
}
